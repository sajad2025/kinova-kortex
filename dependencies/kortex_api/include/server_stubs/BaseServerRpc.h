#ifndef __APIBASESERVER_H__
#define __APIBASESERVER_H__

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <functional>
#include "KeApiRouter.h"
#include "KeApiService.h"
#include "Base.pb.h"
#include <map>

class BaseServer : public KeApiService
{
	public:
		BaseServer(bool isServiceOutOfSessionAllowed);
		virtual ~BaseServer();

		bool Init(KeApiRouter* pApiRouter);

		virtual Kinova::Api::Error CreateUserProfile(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::FullUserProfile* pInFullUserProfile, Kinova::Api::Common::UserProfileHandle* pOutUserProfileHandle);
		virtual Kinova::Api::Error UpdateUserProfile(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::UserProfile* pInUserProfile, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ReadUserProfile(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::UserProfileHandle* pInUserProfileHandle, Kinova::Api::Base::UserProfile* pOutUserProfile);
		virtual Kinova::Api::Error DeleteUserProfile(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::UserProfileHandle* pInUserProfileHandle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ReadAllUserProfiles(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::UserProfileList* pOutUserProfileList);
		virtual Kinova::Api::Error ReadAllUsers(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::UserList* pOutUserList);
		virtual Kinova::Api::Error ChangePassword(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::PasswordChange* pInPasswordChange, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error CreateSequence(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Sequence* pInSequence, Kinova::Api::Base::SequenceHandle* pOutSequenceHandle);
		virtual Kinova::Api::Error UpdateSequence(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Sequence* pInSequence, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ReadSequence(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::SequenceHandle* pInSequenceHandle, Kinova::Api::Base::Sequence* pOutSequence);
		virtual Kinova::Api::Error DeleteSequence(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::SequenceHandle* pInSequenceHandle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ReadAllSequences(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::SequenceList* pOutSequenceList);
		virtual Kinova::Api::Error PlaySequence(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::SequenceHandle* pInSequenceHandle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error PlayAdvancedSequence(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::AdvancedSequenceHandle* pInAdvancedSequenceHandle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error StopSequence(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error PauseSequence(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ResumeSequence(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error CreateProtectionZone(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ProtectionZone* pInProtectionZone, Kinova::Api::Base::ProtectionZoneHandle* pOutProtectionZoneHandle);
		virtual Kinova::Api::Error UpdateProtectionZone(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ProtectionZone* pInProtectionZone, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ReadProtectionZone(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ProtectionZoneHandle* pInProtectionZoneHandle, Kinova::Api::Base::ProtectionZone* pOutProtectionZone);
		virtual Kinova::Api::Error DeleteProtectionZone(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ProtectionZoneHandle* pInProtectionZoneHandle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ReadAllProtectionZones(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::ProtectionZoneList* pOutProtectionZoneList);
		virtual Kinova::Api::Error CreateMapping(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Mapping* pInMapping, Kinova::Api::Base::MappingHandle* pOutMappingHandle);
		virtual Kinova::Api::Error ReadMapping(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::MappingHandle* pInMappingHandle, Kinova::Api::Base::Mapping* pOutMapping);
		virtual Kinova::Api::Error UpdateMapping(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Mapping* pInMapping, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error DeleteMapping(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::MappingHandle* pInMappingHandle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ReadAllMappings(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::MappingList* pOutMappingList);
		virtual Kinova::Api::Error CreateMap(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Map* pInMap, Kinova::Api::Base::MapHandle* pOutMapHandle);
		virtual Kinova::Api::Error ReadMap(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::MapHandle* pInMapHandle, Kinova::Api::Base::Map* pOutMap);
		virtual Kinova::Api::Error UpdateMap(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Map* pInMap, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error DeleteMap(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::MapHandle* pInMapHandle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ReadAllMaps(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::MappingHandle* pInMappingHandle, Kinova::Api::Base::MapList* pOutMapList);
		virtual Kinova::Api::Error ActivateMap(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ActivateMapHandle* pInActivateMapHandle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error CreateAction(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Action* pInAction, Kinova::Api::Base::ActionHandle* pOutActionHandle);
		virtual Kinova::Api::Error ReadAction(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ActionHandle* pInActionHandle, Kinova::Api::Base::Action* pOutAction);
		virtual Kinova::Api::Error ReadAllActions(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::RequestedActionType* pInRequestedActionType, Kinova::Api::Base::ActionList* pOutActionList);
		virtual Kinova::Api::Error DeleteAction(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ActionHandle* pInActionHandle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error UpdateAction(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Action* pInAction, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ExecuteActionFromReference(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ActionHandle* pInActionHandle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ExecuteAction(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Action* pInAction, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error PauseAction(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error StopAction(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ResumeAction(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetIPv4Configuration(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::NetworkHandle* pInNetworkHandle, Kinova::Api::Base::IPv4Configuration* pOutIPv4Configuration);
		virtual Kinova::Api::Error SetIPv4Configuration(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::FullIPv4Configuration* pInFullIPv4Configuration, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error SetCommunicationInterfaceEnable(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::CommunicationInterfaceConfiguration* pInCommunicationInterfaceConfiguration, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error IsCommunicationInterfaceEnable(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::NetworkHandle* pInNetworkHandle, Kinova::Api::Base::CommunicationInterfaceConfiguration* pOutCommunicationInterfaceConfiguration);
		virtual Kinova::Api::Error GetAvailableWifi(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::WifiInformationList* pOutWifiInformationList);
		virtual Kinova::Api::Error GetWifiInformation(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Ssid* pInSsid, Kinova::Api::Base::WifiInformation* pOutWifiInformation);
		virtual Kinova::Api::Error AddWifiConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::WifiConfiguration* pInWifiConfiguration, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error DeleteWifiConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Ssid* pInSsid, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetAllConfiguredWifis(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::WifiConfigurationList* pOutWifiConfigurationList);
		virtual Kinova::Api::Error ConnectWifi(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Ssid* pInSsid, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error DisconnectWifi(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetConnectedWifiInformation(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::WifiInformation* pOutWifiInformation);
		virtual Kinova::Api::Error PlayCartesianTrajectory(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ConstrainedPose* pInConstrainedPose, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error PlayCartesianTrajectoryPosition(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ConstrainedPosition* pInConstrainedPosition, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error PlayCartesianTrajectoryOrientation(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ConstrainedOrientation* pInConstrainedOrientation, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error Stop(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetMeasuredCartesianPose(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::Pose* pOutPose);
		virtual Kinova::Api::Error SendWrenchCommand(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::WrenchCommand* pInWrenchCommand, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error SendWrenchJoystickCommand(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::WrenchCommand* pInWrenchCommand, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error SendTwistJoystickCommand(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::TwistCommand* pInTwistCommand, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error SendTwistCommand(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::TwistCommand* pInTwistCommand, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error PlayJointTrajectory(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ConstrainedJointAngles* pInConstrainedJointAngles, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error PlaySelectedJointTrajectory(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ConstrainedJointAngle* pInConstrainedJointAngle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetMeasuredJointAngles(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::JointAngles* pOutJointAngles);
		virtual Kinova::Api::Error SendJointSpeedsCommand(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::JointSpeeds* pInJointSpeeds, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error SendSelectedJointSpeedCommand(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::JointSpeed* pInJointSpeed, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error SendGripperCommand(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::GripperCommand* pInGripperCommand, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetMeasuredGripperMovement(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::GripperRequest* pInGripperRequest, Kinova::Api::Base::Gripper* pOutGripper);
		virtual Kinova::Api::Error SetAdmittance(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Admittance* pInAdmittance, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error SetOperatingMode(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::OperatingModeInformation* pInOperatingModeInformation, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ApplyEmergencyStop(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ClearFaults(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetOperatingMode(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::OperatingModeInformation* pOutOperatingModeInformation);
		virtual Kinova::Api::Error SetServoingMode(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ServoingModeInformation* pInServoingModeInformation, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetServoingMode(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::ServoingModeInformation* pOutServoingModeInformation);
		virtual Kinova::Api::Error RestoreFactorySettings(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error Reboot(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetAllConnectedControllers(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::ControllerList* pOutControllerList);
		virtual Kinova::Api::Error GetControllerState(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ControllerHandle* pInControllerHandle, Kinova::Api::Base::ControllerState* pOutControllerState);
		virtual Kinova::Api::Error GetActuatorCount(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::ActuatorInformation* pOutActuatorInformation);
		virtual Kinova::Api::Error StartWifiScan(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetConfiguredWifi(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Ssid* pInSsid, Kinova::Api::Base::WifiConfiguration* pOutWifiConfiguration);
		virtual Kinova::Api::Error GetArmState(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::ArmStateInformation* pOutArmStateInformation);
		virtual Kinova::Api::Error GetIPv4Information(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::NetworkHandle* pInNetworkHandle, Kinova::Api::Base::IPv4Information* pOutIPv4Information);
		virtual Kinova::Api::Error SetWifiCountryCode(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::CountryCode* pInCountryCode, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetWifiCountryCode(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::CountryCode* pOutCountryCode);
		virtual Kinova::Api::Error SetCapSenseConfig(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::CapSenseConfig* pInCapSenseConfig, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetCapSenseConfig(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::CapSenseConfig* pOutCapSenseConfig);
		virtual Kinova::Api::Error GetAllJointsTorqueHardLimitation(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::JointsLimitationsList* pOutJointsLimitationsList);
		virtual Kinova::Api::Error GetWrenchHardLimitation(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::WrenchLimitation* pOutWrenchLimitation);
		virtual Kinova::Api::Error SendJointSpeedsJoystickCommand(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::JointSpeeds* pInJointSpeeds, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error SendSelectedJointSpeedJoystickCommand(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::JointSpeed* pInJointSpeed, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error EnableBridge(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::BridgeConfig* pInBridgeConfig, Kinova::Api::Base::BridgeResult* pOutBridgeResult);
		virtual Kinova::Api::Error DisableBridge(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::BridgeIdentifier* pInBridgeIdentifier, Kinova::Api::Base::BridgeResult* pOutBridgeResult);
		virtual Kinova::Api::Error GetBridgeList(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::BridgeList* pOutBridgeList);
		virtual Kinova::Api::Error GetBridgeConfig(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::BridgeIdentifier* pInBridgeIdentifier, Kinova::Api::Base::BridgeConfig* pOutBridgeConfig);
		virtual Kinova::Api::Error PlayPreComputedJointTrajectory(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::PreComputedJointTrajectory* pInPreComputedJointTrajectory, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetProductConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::ProductConfiguration::CompleteProductConfiguration* pOutCompleteProductConfiguration);
		virtual Kinova::Api::Error UpdateEndEffectorTypeConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::ProductConfiguration::ProductConfigurationEndEffectorType* pInProductConfigurationEndEffectorType, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error RestoreFactoryProductConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetTrajectoryErrorReport(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::TrajectoryErrorReport* pOutTrajectoryErrorReport);
		virtual Kinova::Api::Error GetAllJointsTorqueSoftLimitation(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::JointsLimitationsList* pOutJointsLimitationsList);
		virtual Kinova::Api::Error GetWrenchSoftLimitation(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::WrenchLimitation* pOutWrenchLimitation);
		virtual Kinova::Api::Error SetControllerConfigurationMode(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ControllerConfigurationMode* pInControllerConfigurationMode, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetControllerConfigurationMode(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::ControllerConfigurationMode* pOutControllerConfigurationMode);
		virtual Kinova::Api::Error StartTeaching(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::SequenceTaskHandle* pInSequenceTaskHandle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error StopTeaching(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error AddSequenceTasks(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::SequenceTasksConfiguration* pInSequenceTasksConfiguration, Kinova::Api::Base::SequenceTasksRange* pOutSequenceTasksRange);
		virtual Kinova::Api::Error UpdateSequenceTask(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::SequenceTaskConfiguration* pInSequenceTaskConfiguration, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error SwapSequenceTasks(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::SequenceTasksPair* pInSequenceTasksPair, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error ReadSequenceTask(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::SequenceTaskHandle* pInSequenceTaskHandle, Kinova::Api::Base::SequenceTask* pOutSequenceTask);
		virtual Kinova::Api::Error ReadAllSequenceTasks(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::SequenceHandle* pInSequenceHandle, Kinova::Api::Base::SequenceTasks* pOutSequenceTasks);
		virtual Kinova::Api::Error DeleteSequenceTask(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::SequenceTaskHandle* pInSequenceTaskHandle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error DeleteAllSequenceTasks(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::SequenceHandle* pInSequenceHandle, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error TakeSnapshot(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::Snapshot* pInSnapshot, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetFirmwareBundleVersions(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::FirmwareBundleVersions* pOutFirmwareBundleVersions);
		virtual Kinova::Api::Error ExecuteWaypointTrajectory(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::WaypointList* pInWaypointList, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error MoveSequenceTask(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::SequenceTasksPair* pInSequenceTasksPair, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error DuplicateMapping(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::MappingHandle* pInMappingHandle, Kinova::Api::Base::MappingHandle* pOutMappingHandle);
		virtual Kinova::Api::Error DuplicateMap(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::MapHandle* pInMapHandle, Kinova::Api::Base::MapHandle* pOutMapHandle);
		virtual Kinova::Api::Error SetControllerConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ControllerConfiguration* pInControllerConfiguration, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetControllerConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::ControllerHandle* pInControllerHandle, Kinova::Api::Base::ControllerConfiguration* pOutControllerConfiguration);
		virtual Kinova::Api::Error GetAllControllerConfigurations(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::ControllerConfigurationList* pOutControllerConfigurationList);
		virtual Kinova::Api::Error ComputeForwardKinematics(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::JointAngles* pInJointAngles, Kinova::Api::Base::Pose* pOutPose);
		virtual Kinova::Api::Error ComputeInverseKinematics(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::IKData* pInIKData, Kinova::Api::Base::JointAngles* pOutJointAngles);
		virtual Kinova::Api::Error ValidateWaypointList(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::WaypointList* pInWaypointList, Kinova::Api::Base::WaypointValidationReport* pOutWaypointValidationReport);
		virtual Kinova::Api::Error SetWifiEnableState(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::WifiEnableState* pInWifiEnableState, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetWifiEnableState(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::WifiEnableState* pOutWifiEnableState);
		virtual Kinova::Api::Error SetBluetoothEnableState(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Base::BluetoothEnableState* pInBluetoothEnableState, Kinova::Api::Common::Empty* pOutEmpty);
		virtual Kinova::Api::Error GetBluetoothEnableState(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::Empty* pInEmpty, Kinova::Api::Base::BluetoothEnableState* pOutBluetoothEnableState);

		bool IsThereConfigurationChangeTopicSubscribedNotif();
		bool IsThereMappingInfoTopicSubscribedNotif();
		bool IsThereOperatingModeTopicSubscribedNotif();
		bool IsThereSequenceInfoTopicSubscribedNotif();
		bool IsThereProtectionZoneTopicSubscribedNotif();
		bool IsThereUserTopicSubscribedNotif();
		bool IsThereControllerTopicSubscribedNotif();
		bool IsThereActionTopicSubscribedNotif();
		bool IsThereRobotEventTopicSubscribedNotif();
		bool IsThereServoingModeTopicSubscribedNotif();
		bool IsThereFactoryTopicSubscribedNotif();
		bool IsThereNetworkTopicSubscribedNotif();
		bool IsThereArmStateTopicSubscribedNotif();

		void NotifyConfigurationChangeTopic(Kinova::Api::Base::ConfigurationChangeNotification& configurationChangeNotification);
		void NotifyMappingInfoTopic(Kinova::Api::Base::MappingInfoNotification& mappingInfoNotification);
		void NotifyOperatingModeTopic(Kinova::Api::Base::OperatingModeNotification& operatingModeNotification);
		void NotifySequenceInfoTopic(Kinova::Api::Base::SequenceInfoNotification& sequenceInfoNotification);
		void NotifyProtectionZoneTopic(Kinova::Api::Base::ProtectionZoneNotification& protectionZoneNotification);
		void NotifyUserTopic(Kinova::Api::Base::UserNotification& userNotification);
		void NotifyControllerTopic(Kinova::Api::Base::ControllerNotification& controllerNotification);
		void NotifyActionTopic(Kinova::Api::Base::ActionNotification& actionNotification);
		void NotifyRobotEventTopic(Kinova::Api::Base::RobotEventNotification& robotEventNotification);
		void NotifyServoingModeTopic(Kinova::Api::Base::ServoingModeNotification& servoingModeNotification);
		void NotifyFactoryTopic(Kinova::Api::Base::FactoryNotification& factoryNotification);
		void NotifyNetworkTopic(Kinova::Api::Base::NetworkNotification& networkNotification);
		void NotifyArmStateTopic(Kinova::Api::Base::ArmStateNotification& armStateNotification);

	private:
		void cbCleanupNotification( const ClientConnectionHandle &connectionHandle );

		ReturnStatus cbCreateUserProfile(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbUpdateUserProfile(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadUserProfile(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbDeleteUserProfile(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadAllUserProfiles(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadAllUsers(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbChangePassword(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbCreateSequence(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbUpdateSequence(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadSequence(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbDeleteSequence(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadAllSequences(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbPlaySequence(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbPlayAdvancedSequence(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbStopSequence(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbPauseSequence(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbResumeSequence(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbCreateProtectionZone(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbUpdateProtectionZone(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadProtectionZone(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbDeleteProtectionZone(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadAllProtectionZones(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbCreateMapping(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadMapping(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbUpdateMapping(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbDeleteMapping(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadAllMappings(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbCreateMap(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadMap(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbUpdateMap(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbDeleteMap(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadAllMaps(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbActivateMap(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbCreateAction(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadAction(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadAllActions(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbDeleteAction(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbUpdateAction(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbExecuteActionFromReference(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbExecuteAction(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbPauseAction(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbStopAction(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbResumeAction(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetIPv4Configuration(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSetIPv4Configuration(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSetCommunicationInterfaceEnable(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbIsCommunicationInterfaceEnable(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetAvailableWifi(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetWifiInformation(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbAddWifiConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbDeleteWifiConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetAllConfiguredWifis(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbConnectWifi(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbDisconnectWifi(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetConnectedWifiInformation(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbUnsubscribe(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbOnNotificationConfigurationChangeTopic(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbOnNotificationMappingInfoTopic(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbOnNotificationOperatingModeTopic(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbOnNotificationSequenceInfoTopic(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbOnNotificationProtectionZoneTopic(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbOnNotificationUserTopic(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbOnNotificationControllerTopic(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbOnNotificationActionTopic(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbOnNotificationRobotEventTopic(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbPlayCartesianTrajectory(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbPlayCartesianTrajectoryPosition(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbPlayCartesianTrajectoryOrientation(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbStop(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetMeasuredCartesianPose(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSendWrenchCommand(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSendWrenchJoystickCommand(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSendTwistJoystickCommand(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSendTwistCommand(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbPlayJointTrajectory(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbPlaySelectedJointTrajectory(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetMeasuredJointAngles(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSendJointSpeedsCommand(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSendSelectedJointSpeedCommand(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSendGripperCommand(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetMeasuredGripperMovement(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSetAdmittance(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSetOperatingMode(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbApplyEmergencyStop(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbClearFaults(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetOperatingMode(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSetServoingMode(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetServoingMode(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbOnNotificationServoingModeTopic(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbRestoreFactorySettings(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReboot(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbOnNotificationFactoryTopic(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetAllConnectedControllers(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetControllerState(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetActuatorCount(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbStartWifiScan(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetConfiguredWifi(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbOnNotificationNetworkTopic(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetArmState(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbOnNotificationArmStateTopic(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetIPv4Information(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSetWifiCountryCode(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetWifiCountryCode(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSetCapSenseConfig(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetCapSenseConfig(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetAllJointsTorqueHardLimitation(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetWrenchHardLimitation(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSendJointSpeedsJoystickCommand(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSendSelectedJointSpeedJoystickCommand(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbEnableBridge(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbDisableBridge(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetBridgeList(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetBridgeConfig(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbPlayPreComputedJointTrajectory(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetProductConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbUpdateEndEffectorTypeConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbRestoreFactoryProductConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetTrajectoryErrorReport(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetAllJointsTorqueSoftLimitation(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetWrenchSoftLimitation(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSetControllerConfigurationMode(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetControllerConfigurationMode(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbStartTeaching(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbStopTeaching(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbAddSequenceTasks(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbUpdateSequenceTask(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSwapSequenceTasks(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadSequenceTask(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbReadAllSequenceTasks(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbDeleteSequenceTask(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbDeleteAllSequenceTasks(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbTakeSnapshot(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetFirmwareBundleVersions(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbExecuteWaypointTrajectory(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbMoveSequenceTask(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbDuplicateMapping(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbDuplicateMap(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSetControllerConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetControllerConfiguration(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetAllControllerConfigurations(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbComputeForwardKinematics(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbComputeInverseKinematics(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbValidateWaypointList(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSetWifiEnableState(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetWifiEnableState(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbSetBluetoothEnableState(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		ReturnStatus cbGetBluetoothEnableState(const KeApiRouter::tSessionInfo &sessionInfo, std::string* pInOutpayload);
		
		ReturnStatus Unsubscribe(const KeApiRouter::tSessionInfo &sessionInfo, Kinova::Api::Common::NotificationHandle* pInNotificationHandle, Kinova::Api::Common::Empty* pOutEmpty);
		
		MapNotifs m_mapNotifConfigurationChangeTopic;
		MapNotifs m_mapNotifMappingInfoTopic;
		MapNotifs m_mapNotifOperatingModeTopic;
		MapNotifs m_mapNotifSequenceInfoTopic;
		MapNotifs m_mapNotifProtectionZoneTopic;
		MapNotifs m_mapNotifUserTopic;
		MapNotifs m_mapNotifControllerTopic;
		MapNotifs m_mapNotifActionTopic;
		MapNotifs m_mapNotifRobotEventTopic;
		MapNotifs m_mapNotifServoingModeTopic;
		MapNotifs m_mapNotifFactoryTopic;
		MapNotifs m_mapNotifNetworkTopic;
		MapNotifs m_mapNotifArmStateTopic;
};

#endif